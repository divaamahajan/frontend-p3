{"ast":null,"code":"import axios from'axios';import{API_CONFIG}from'../config/api';// Create axios instance with base configuration\nconst api=axios.create({baseURL:API_CONFIG.BASE_URL,headers:{'Content-Type':'application/json'},timeout:API_CONFIG.TIMEOUT});// Request interceptor to add auth token\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;},error=>{return Promise.reject(error);});// Response interceptor for error handling\napi.interceptors.response.use(response=>response,error=>{var _error$response,_error$response2;// Handle authentication errors\nif(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){localStorage.removeItem('token');localStorage.removeItem('user');window.location.href='/login';}// Handle network errors\nif(error.code==='ECONNABORTED'){console.error('Request timeout - server may be slow or unavailable');}// Handle server errors\nif(((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.status)>=500){console.error('Server error - please try again later');}return Promise.reject(error);});// Utility function for retrying failed requests\nconst retryRequest=async function(requestFn){let maxAttempts=arguments.length>1&&arguments[1]!==undefined?arguments[1]:API_CONFIG.RETRY.MAX_ATTEMPTS;for(let attempt=1;attempt<=maxAttempts;attempt++){try{return await requestFn();}catch(error){if(attempt===maxAttempts)throw error;// Wait before retrying\nawait new Promise(resolve=>setTimeout(resolve,API_CONFIG.RETRY.DELAY*attempt));console.log(\"Retrying request (attempt \".concat(attempt+1,\"/\").concat(maxAttempts,\")\"));}}};export const engagementApi={// Channel management\ngetChannels:()=>retryRequest(()=>api.get('/engagement/channels')),addChannel:channelData=>retryRequest(()=>api.post('/engagement/channels',channelData)),// Sentiment analysis\ngetDailySentiment:(channelId,date)=>retryRequest(()=>api.get(\"/engagement/sentiment/daily/\".concat(channelId),{params:{date}})),// Trends and insights\ngetWeeklyTrends:()=>retryRequest(()=>api.get('/engagement/trends/weekly')),getBurnoutWarnings:()=>retryRequest(()=>api.get('/engagement/burnout-warnings'))};export default api;","map":{"version":3,"names":["axios","API_CONFIG","api","create","baseURL","BASE_URL","headers","timeout","TIMEOUT","interceptors","request","use","config","token","localStorage","getItem","Authorization","concat","error","Promise","reject","response","_error$response","_error$response2","status","removeItem","window","location","href","code","console","retryRequest","requestFn","maxAttempts","arguments","length","undefined","RETRY","MAX_ATTEMPTS","attempt","resolve","setTimeout","DELAY","log","engagementApi","getChannels","get","addChannel","channelData","post","getDailySentiment","channelId","date","params","getWeeklyTrends","getBurnoutWarnings"],"sources":["/Users/achin.gupta/Documents/mycode/buildathon-templates/p3/frontend-p3/src/services/engagementApi.js"],"sourcesContent":["import axios from 'axios';\nimport { API_CONFIG } from '../config/api';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: API_CONFIG.BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  timeout: API_CONFIG.TIMEOUT,\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    // Handle authentication errors\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n    \n    // Handle network errors\n    if (error.code === 'ECONNABORTED') {\n      console.error('Request timeout - server may be slow or unavailable');\n    }\n    \n    // Handle server errors\n    if (error.response?.status >= 500) {\n      console.error('Server error - please try again later');\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n// Utility function for retrying failed requests\nconst retryRequest = async (requestFn, maxAttempts = API_CONFIG.RETRY.MAX_ATTEMPTS) => {\n  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n    try {\n      return await requestFn();\n    } catch (error) {\n      if (attempt === maxAttempts) throw error;\n      \n      // Wait before retrying\n      await new Promise(resolve => setTimeout(resolve, API_CONFIG.RETRY.DELAY * attempt));\n      console.log(`Retrying request (attempt ${attempt + 1}/${maxAttempts})`);\n    }\n  }\n};\n\nexport const engagementApi = {\n  // Channel management\n  getChannels: () => retryRequest(() => api.get('/engagement/channels')),\n  addChannel: (channelData) => retryRequest(() => api.post('/engagement/channels', channelData)),\n  \n  // Sentiment analysis\n  getDailySentiment: (channelId, date) => \n    retryRequest(() => api.get(`/engagement/sentiment/daily/${channelId}`, { params: { date } })),\n  \n  // Trends and insights\n  getWeeklyTrends: () => retryRequest(() => api.get('/engagement/trends/weekly')),\n  getBurnoutWarnings: () => retryRequest(() => api.get('/engagement/burnout-warnings')),\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}