{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const engagementApi = {\n  // Channel management\n  getChannels: () => api.get('/engagement/channels'),\n  addChannel: channelData => api.post('/engagement/channels', channelData),\n  // Sentiment analysis\n  getDailySentiment: (channelId, date) => api.get(`/engagement/sentiment/daily/${channelId}`, {\n    params: {\n      date\n    }\n  }),\n  // Trends and insights\n  getWeeklyTrends: () => api.get('/engagement/trends/weekly'),\n  getBurnoutWarnings: () => api.get('/engagement/burnout-warnings')\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","engagementApi","getChannels","get","addChannel","channelData","post","getDailySentiment","channelId","date","params","getWeeklyTrends","getBurnoutWarnings"],"sources":["/Users/achin.gupta/Documents/mycode/buildathon-templates/p3/frontend-p3/src/services/engagementApi.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const engagementApi = {\n  // Channel management\n  getChannels: () => api.get('/engagement/channels'),\n  addChannel: (channelData) => api.post('/engagement/channels', channelData),\n  \n  // Sentiment analysis\n  getDailySentiment: (channelId, date) => \n    api.get(`/engagement/sentiment/daily/${channelId}`, { params: { date } }),\n  \n  // Trends and insights\n  getWeeklyTrends: () => api.get('/engagement/trends/weekly'),\n  getBurnoutWarnings: () => api.get('/engagement/burnout-warnings'),\n};\n\nexport default api;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;;AAE7E;AACA,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAZ,GAAG,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClCR,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;IAChCT,YAAY,CAACS,UAAU,CAAC,MAAM,CAAC;IAC/BC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,OAAO,MAAMU,aAAa,GAAG;EAC3B;EACAC,WAAW,EAAEA,CAAA,KAAMvB,GAAG,CAACwB,GAAG,CAAC,sBAAsB,CAAC;EAClDC,UAAU,EAAGC,WAAW,IAAK1B,GAAG,CAAC2B,IAAI,CAAC,sBAAsB,EAAED,WAAW,CAAC;EAE1E;EACAE,iBAAiB,EAAEA,CAACC,SAAS,EAAEC,IAAI,KACjC9B,GAAG,CAACwB,GAAG,CAAC,+BAA+BK,SAAS,EAAE,EAAE;IAAEE,MAAM,EAAE;MAAED;IAAK;EAAE,CAAC,CAAC;EAE3E;EACAE,eAAe,EAAEA,CAAA,KAAMhC,GAAG,CAACwB,GAAG,CAAC,2BAA2B,CAAC;EAC3DS,kBAAkB,EAAEA,CAAA,KAAMjC,GAAG,CAACwB,GAAG,CAAC,8BAA8B;AAClE,CAAC;AAED,eAAexB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}