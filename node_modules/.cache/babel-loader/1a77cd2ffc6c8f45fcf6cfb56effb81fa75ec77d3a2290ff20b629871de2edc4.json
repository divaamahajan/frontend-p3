{"ast":null,"code":"import axios from 'axios';\nimport { API_CONFIG } from '../config/api';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: API_CONFIG.BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: API_CONFIG.TIMEOUT\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => response, error => {\n  var _error$response, _error$response2;\n  // Handle authentication errors\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n\n  // Handle network errors\n  if (error.code === 'ECONNABORTED') {\n    console.error('Request timeout - server may be slow or unavailable');\n  }\n\n  // Handle server errors\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) >= 500) {\n    console.error('Server error - please try again later');\n  }\n  return Promise.reject(error);\n});\n\n// Utility function for retrying failed requests\nconst retryRequest = async (requestFn, maxAttempts = API_CONFIG.RETRY.MAX_ATTEMPTS) => {\n  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n    try {\n      return await requestFn();\n    } catch (error) {\n      if (attempt === maxAttempts) throw error;\n\n      // Wait before retrying\n      await new Promise(resolve => setTimeout(resolve, API_CONFIG.RETRY.DELAY * attempt));\n      console.log(`Retrying request (attempt ${attempt + 1}/${maxAttempts})`);\n    }\n  }\n};\nexport const engagementApi = {\n  // Channel management\n  getChannels: () => retryRequest(() => api.get('/engagement/channels')),\n  addChannel: channelData => retryRequest(() => api.post('/engagement/channels', channelData)),\n  // Sentiment analysis\n  getDailySentiment: (channelId, date) => retryRequest(() => api.get(`/engagement/sentiment/daily/${channelId}`, {\n    params: {\n      date\n    }\n  })),\n  // Trends and insights\n  getWeeklyTrends: () => retryRequest(() => api.get('/engagement/trends/weekly')),\n  getBurnoutWarnings: () => retryRequest(() => api.get('/engagement/burnout-warnings'))\n};\nexport default api;","map":{"version":3,"names":["axios","API_CONFIG","api","create","baseURL","BASE_URL","headers","timeout","TIMEOUT","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","_error$response2","status","removeItem","window","location","href","code","console","retryRequest","requestFn","maxAttempts","RETRY","MAX_ATTEMPTS","attempt","resolve","setTimeout","DELAY","log","engagementApi","getChannels","get","addChannel","channelData","post","getDailySentiment","channelId","date","params","getWeeklyTrends","getBurnoutWarnings"],"sources":["/Users/achin.gupta/Documents/mycode/buildathon-templates/p3/frontend-p3/src/services/engagementApi.js"],"sourcesContent":["import axios from 'axios';\nimport { API_CONFIG } from '../config/api';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: API_CONFIG.BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  timeout: API_CONFIG.TIMEOUT,\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    // Handle authentication errors\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n    \n    // Handle network errors\n    if (error.code === 'ECONNABORTED') {\n      console.error('Request timeout - server may be slow or unavailable');\n    }\n    \n    // Handle server errors\n    if (error.response?.status >= 500) {\n      console.error('Server error - please try again later');\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n// Utility function for retrying failed requests\nconst retryRequest = async (requestFn, maxAttempts = API_CONFIG.RETRY.MAX_ATTEMPTS) => {\n  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n    try {\n      return await requestFn();\n    } catch (error) {\n      if (attempt === maxAttempts) throw error;\n      \n      // Wait before retrying\n      await new Promise(resolve => setTimeout(resolve, API_CONFIG.RETRY.DELAY * attempt));\n      console.log(`Retrying request (attempt ${attempt + 1}/${maxAttempts})`);\n    }\n  }\n};\n\nexport const engagementApi = {\n  // Channel management\n  getChannels: () => retryRequest(() => api.get('/engagement/channels')),\n  addChannel: (channelData) => retryRequest(() => api.post('/engagement/channels', channelData)),\n  \n  // Sentiment analysis\n  getDailySentiment: (channelId, date) => \n    retryRequest(() => api.get(`/engagement/sentiment/daily/${channelId}`, { params: { date } })),\n  \n  // Trends and insights\n  getWeeklyTrends: () => retryRequest(() => api.get('/engagement/trends/weekly')),\n  getBurnoutWarnings: () => retryRequest(() => api.get('/engagement/burnout-warnings')),\n};\n\nexport default api;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,eAAe;;AAE1C;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,UAAU,CAACI,QAAQ;EAC5BC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACDC,OAAO,EAAEN,UAAU,CAACO;AACtB,CAAC,CAAC;;AAEF;AACAN,GAAG,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACN,OAAO,CAACU,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAf,GAAG,CAACO,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EAAA,IAAAI,eAAA,EAAAC,gBAAA;EACT;EACA,IAAI,EAAAD,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,MAAK,GAAG,EAAE;IAClCT,YAAY,CAACU,UAAU,CAAC,OAAO,CAAC;IAChCV,YAAY,CAACU,UAAU,CAAC,MAAM,CAAC;IAC/BC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;;EAEA;EACA,IAAIV,KAAK,CAACW,IAAI,KAAK,cAAc,EAAE;IACjCC,OAAO,CAACZ,KAAK,CAAC,qDAAqD,CAAC;EACtE;;EAEA;EACA,IAAI,EAAAK,gBAAA,GAAAL,KAAK,CAACG,QAAQ,cAAAE,gBAAA,uBAAdA,gBAAA,CAAgBC,MAAM,KAAI,GAAG,EAAE;IACjCM,OAAO,CAACZ,KAAK,CAAC,uCAAuC,CAAC;EACxD;EAEA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,MAAMa,YAAY,GAAG,MAAAA,CAAOC,SAAS,EAAEC,WAAW,GAAG/B,UAAU,CAACgC,KAAK,CAACC,YAAY,KAAK;EACrF,KAAK,IAAIC,OAAO,GAAG,CAAC,EAAEA,OAAO,IAAIH,WAAW,EAAEG,OAAO,EAAE,EAAE;IACvD,IAAI;MACF,OAAO,MAAMJ,SAAS,CAAC,CAAC;IAC1B,CAAC,CAAC,OAAOd,KAAK,EAAE;MACd,IAAIkB,OAAO,KAAKH,WAAW,EAAE,MAAMf,KAAK;;MAExC;MACA,MAAM,IAAIC,OAAO,CAACkB,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAEnC,UAAU,CAACgC,KAAK,CAACK,KAAK,GAAGH,OAAO,CAAC,CAAC;MACnFN,OAAO,CAACU,GAAG,CAAC,6BAA6BJ,OAAO,GAAG,CAAC,IAAIH,WAAW,GAAG,CAAC;IACzE;EACF;AACF,CAAC;AAED,OAAO,MAAMQ,aAAa,GAAG;EAC3B;EACAC,WAAW,EAAEA,CAAA,KAAMX,YAAY,CAAC,MAAM5B,GAAG,CAACwC,GAAG,CAAC,sBAAsB,CAAC,CAAC;EACtEC,UAAU,EAAGC,WAAW,IAAKd,YAAY,CAAC,MAAM5B,GAAG,CAAC2C,IAAI,CAAC,sBAAsB,EAAED,WAAW,CAAC,CAAC;EAE9F;EACAE,iBAAiB,EAAEA,CAACC,SAAS,EAAEC,IAAI,KACjClB,YAAY,CAAC,MAAM5B,GAAG,CAACwC,GAAG,CAAC,+BAA+BK,SAAS,EAAE,EAAE;IAAEE,MAAM,EAAE;MAAED;IAAK;EAAE,CAAC,CAAC,CAAC;EAE/F;EACAE,eAAe,EAAEA,CAAA,KAAMpB,YAAY,CAAC,MAAM5B,GAAG,CAACwC,GAAG,CAAC,2BAA2B,CAAC,CAAC;EAC/ES,kBAAkB,EAAEA,CAAA,KAAMrB,YAAY,CAAC,MAAM5B,GAAG,CAACwC,GAAG,CAAC,8BAA8B,CAAC;AACtF,CAAC;AAED,eAAexC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}